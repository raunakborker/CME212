# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
Molecular Dynamics Simulation Module
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_moldyn', [dirname(__file__)])
        except ImportError:
            import _moldyn
            return _moldyn
        if fp is not None:
            try:
                _mod = imp.load_module('_moldyn', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _moldyn = swig_import_helper()
    del swig_import_helper
else:
    import _moldyn
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _moldyn.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _moldyn.SwigPyIterator_value(self)
    def incr(self, n=1): return _moldyn.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _moldyn.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _moldyn.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _moldyn.SwigPyIterator_equal(self, *args)
    def copy(self): return _moldyn.SwigPyIterator_copy(self)
    def next(self): return _moldyn.SwigPyIterator_next(self)
    def __next__(self): return _moldyn.SwigPyIterator___next__(self)
    def previous(self): return _moldyn.SwigPyIterator_previous(self)
    def advance(self, *args): return _moldyn.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _moldyn.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _moldyn.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _moldyn.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _moldyn.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _moldyn.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _moldyn.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _moldyn.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

DIM = _moldyn.DIM
PREC = _moldyn.PREC

def swap(*args):
  return _moldyn.swap(*args)
swap = _moldyn.swap

def unswap(*args):
  return _moldyn.unswap(*args)
unswap = _moldyn.unswap
class ParticleBoxF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleBoxF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleBoxF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moldyn.new_ParticleBoxF(*args)
        try: self.this.append(this)
        except: self.this = this
    def OutputEnergy(self): return _moldyn.ParticleBoxF_OutputEnergy(self)
    def Solve(self, steps=25): return _moldyn.ParticleBoxF_Solve(self, steps)
    def SaveOutput(self, *args): return _moldyn.ParticleBoxF_SaveOutput(self, *args)
    __swig_destroy__ = _moldyn.delete_ParticleBoxF
    __del__ = lambda self : None;
ParticleBoxF_swigregister = _moldyn.ParticleBoxF_swigregister
ParticleBoxF_swigregister(ParticleBoxF)

class ParticleBoxD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleBoxD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleBoxD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moldyn.new_ParticleBoxD(*args)
        try: self.this.append(this)
        except: self.this = this
    def OutputEnergy(self): return _moldyn.ParticleBoxD_OutputEnergy(self)
    def Solve(self, steps=25): return _moldyn.ParticleBoxD_Solve(self, steps)
    def SaveOutput(self, *args): return _moldyn.ParticleBoxD_SaveOutput(self, *args)
    __swig_destroy__ = _moldyn.delete_ParticleBoxD
    __del__ = lambda self : None;
ParticleBoxD_swigregister = _moldyn.ParticleBoxD_swigregister
ParticleBoxD_swigregister(ParticleBoxD)

# This file is compatible with both classic and new-style classes.


