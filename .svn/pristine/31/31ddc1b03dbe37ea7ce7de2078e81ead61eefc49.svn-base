#ifndef IMAGE_HPP
#define IMAGE_HPP

#include <string>

#include "tiffio.h"

namespace ImageAnalysis
{
  template <typename T>
  class Image
  {
  private:
      unsigned int width, height;
      T *rgba;

  public:
    Image(std::string filename)
    {
      const char *inputfile = filename.c_str();
      T *rgbaT;      

      TIFF *tif = TIFFOpen(inputfile, "r");
      if (!tif)
	{
	  std::cerr << "ERROR: Failed to open " << filename << " for input" << std::endl;
	  //return 1;
	}
      
      TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &this->width);
      TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &this->height);

      rgbaT = (T *) _TIFFmalloc(4*width*height*sizeof(T));
      TIFFReadRGBAImage(tif, this->width, this->height, (unsigned int *)rgbaT, 0);
      
      this->rgba = new T[4*width*height];
      for(n = 0; n < width*height; n++)
	{
	  this->rgba[4*n+0] = rgbachar[4*n+0];
	  this->rgba[4*n+1] = rgbachar[4*n+1];
	  this->rgba[4*n+2] = rgbachar[4*n+2];
	  this->rgba[4*n+3] = rgbachar[4*n+3];
	}

      _TIFFfree(rgbaT);
      rgbaT = NULL;

      TIFFClose(tif);
      tif = NULL; 
    }
    
    Image(T *data, unsigned int width, unsigned int height)
    {
      this->rgba = new T[width*height];
      for(n = 0; n < width*height; n++)
	  this->rgba[n] = data[n];
    }

    void Save(std::string filename);

    void Threshold(T threshold);

    unsigned long int CountPixesGreaterThanOrEqual(T value = (T)0);

    ~Image()
    {
      delete[] rgba;
      rgba = NULL;
    }
  };

  template <>
  Image<float>::Image(std::string filename)
    {
      const char *inputfile = filename.c_str();
      unsigned char *rgbachar;      

      TIFF *tif = TIFFOpen(inputfile, "r");
      if (!tif)
	{
	  std::cerr << "ERROR: Failed to open " << filename << " for input" << std::endl;
	  //return 1;
	}
      
      TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &this->width);
      TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &this->height);

      rgbachar = (unsigned char *) _TIFFmalloc(4*width*height*sizeof(unsigned char));
      TIFFReadRGBAImage(tif, this->width, this->height, (unsigned int *)rgbachar, 0);

      this->rgba = new float[4*width*height];
      for(n = 0; n < width*height; n++)
	{
	  this->rgba[4*n+0] = (float)((float)rgbachar[4*n+0]/255.0f);
	  this->rgba[4*n+1] = (float)((float)rgbachar[4*n+1]/255.0f);
	  this->rgba[4*n+2] = (float)((float)rgbachar[4*n+2]/255.0f);
	  this->rgba[4*n+3] = (float)((float)rgbachar[4*n+3]);
	}

      _TIFFfree(rgbachar);
      rgbachar = NULL;
      
      TIFFClose(tif);
      tif = NULL; 
    }

}

#endif /* IMAGE_HPP */
