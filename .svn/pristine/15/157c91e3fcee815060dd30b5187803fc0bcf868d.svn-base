#ifndef PARTICLEBOX_HPP
#define PARTICLEBOX_HPP

#include <cmath>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <memory>
#include <random>
#include <string>
#include <vector>

#include "auxfuncs.hpp"
#include "macros.hpp"
#include "Particle.hpp"

#define DIM 3
#define PREC 16
/* Class that has a N particles in a box */
template <typename T>
class ParticleBox
{
private:
  //std::vector<Particle<T> > particles;
  std::vector< std::shared_ptr< Particle<T> > > particles;
  T h, L, T0;
  unsigned int N;

  T Distance(const std::vector<T> &posi, const std::vector<T> &posj);
  T Potential(T r);
  void Displacement(const std::vector<T> &posi, const std::vector<T> &posj, std::vector<T> &d);
  void GetForce(const std::vector<T> &posi, const std::vector<T> &posj, std::vector<T> &F);
  void PutInBox(std::vector<T> &posi);
  std::vector<T> VerletNextR(unsigned int ind);
  std::vector<T> VerletNextV(unsigned int ind, const std::vector<T> &nacc);

public:
  ParticleBox(unsigned int N, T L, T T0, T M = (T)1.0);
  ParticleBox(std::string checkpointfile);
  void InitPosition(T M);
  void InitVelocity(T M);
  void ComputeEnergy(std::vector<T> &energy);
  void InternalForce(unsigned int ind, std::vector<T> &F, std::vector<T> &dF);
  void SetPos(const std::vector<std::vector<T> > &pos);
  void SetVel(const std::vector<std::vector<T> > &vel);
  void Solve(unsigned int steps=1000);
  void WriteData(std::string outputfile);
};

template <typename T>
ParticleBox<T>::ParticleBox(unsigned int N, T L, T T0, T M)
{
  this->N = N;
  this->L = L;
  this->T0 = T0;
  this->h = (T)0.01;
  
  InitPosition(M);
  InitVelocity(M);
}

template <typename T>
ParticleBox<T>::ParticleBox(std::string checkpointfile)
{
  std::ifstream fcheckpoint;
  fcheckpoint.open(checkpointfile);

  if (fcheckpoint.is_open())
    { 
      double M;
      fcheckpoint >> this->N >> this->L >> this->T0 >> this->h >> M;

      std::vector<T> pos {0.0, 0.0, 0.0};
      std::vector<T> vel {0.0, 0.0, 0.0};
      std::vector<T> acc {0.0, 0.0, 0.0};
      
      for (unsigned int n=0; n<N; n++)
        {
          fcheckpoint >> pos[0] >> pos[1] >> pos[2] >> vel[0] >> vel[1] >> vel[2];
	  particles.push_back(std::make_shared<Particle<T> >(pos,vel,acc,M));
        }
     }
  else
    {
      ThrowException("ERROR: Failed to open the file " + checkpointfile + " !");
    }
}

// Initialize position of all the particles
template <typename T>
void ParticleBox<T>::InitPosition(T M)
{
  unsigned int Ncube = 1;

  while (N > (Ncube*Ncube*Ncube))
    Ncube++;

  if ((T)std::pow(Ncube,3) != N)
    {
      std::cout << "Particle number " << N << " is not a perfect cube;" 
                << " this may result in a lousy initialization" << std::endl;
    }

  T rs = (T)L/Ncube;
  T roffset = (T)L/2 - rs/2;
  unsigned int n = 0;
  std::vector<T> vel {0.0, 0.0, 0.0};
  std::vector<T> acc {0.0, 0.0, 0.0};
  
  for (unsigned int x=0; x<Ncube; x++)
    {
      for (unsigned int y=0; y<Ncube; y++)
        {
          for (unsigned int z=0; z<Ncube; z++)
            {
              if (n < N)
                {
                  std::vector<T> pos {rs*x - roffset,  rs*y - roffset, rs*z - roffset};
		  particles.push_back(std::make_shared<Particle<T> >(pos,vel,acc,M));
                  n++;
                }
            }
        }
    }
}

// Initialize velocity of all the particles
template <typename T>
void ParticleBox<T>::InitVelocity(T M)
{
  T netE = 0.0;
  T newP = 0.0;
  T vscale = 0.0;
  std::vector<T> netP (DIM, (T)0.0);

  //std::ifstream frandom;
  //frandom.open("data/random.txt");

  std::default_random_engine generator;
  std::uniform_real_distribution<T> distribution(0.0,1.0);

  //if (frandom.is_open())
  //{ 
  for (unsigned int n=0; n<N; n++)
    {
      std::vector<T> vel (DIM, (T)0.0);
      for (unsigned int x=0; x<DIM; x++)
	{
	  //frandom >> newP;
	  //newP = newP - (T)0.5;
	  newP = distribution(generator) - (T)0.5;
	  netP[x] += newP;
	  netE += newP*newP;
	  vel[x]= newP;
	}
      particles[n]->SetVel(vel);
    }
      //  frandom.close();
      //}
      //else 
      //    {
      //ThrowException("ERROR: Failed to open the file !")
      //}

  netP = ((T)1.0/N)*netP;
  vscale = std::sqrt(3*N*T0/(M*netE));
  for (unsigned int n=0; n<N; n++)
    {
      auto vel = particles[n]->GetVel();
      for (unsigned int x=0; x<DIM; x++)
        {
          vel[x] = (vel[x] - netP[x]) * vscale;
        }
      particles[n]->SetVel(vel);
    }
}

template <typename T>
void ParticleBox<T>::ComputeEnergy(std::vector<T> &energy)
{
  for (unsigned int i=0; i < energy.size(); i++)
    {
      energy[i] = 0.0;
    }

  for (unsigned int i=0; i<N; i++)
    {
      /*auto mass = particles[i]->GetMass();
      auto posi = particles[i]->GetPos();
      auto vel = particles[i]->GetVel();*/
      auto &mass = particles[i]->mass;
      auto &posi = particles[i]->pos;
      auto &vel = particles[i]->vel;

      // Kinetic Energy
      for (unsigned int k=0; k<DIM; k++)
        energy[1] += (T)0.5*mass*(vel[k]*vel[k]);

      // Potential Energy 
      for (unsigned int j=0; j<i; j++)
        {
          //auto posj = particles[j]->GetPos();
	  auto &posj = particles[j]->pos;
	  auto d = Distance(posi,posj);
	  energy[0] += Potential(d);
        }
    }
  // Total Energy
  energy[2] = energy[0] + energy[1];
}

template <typename T>
void ParticleBox<T>::InternalForce(unsigned int ind, std::vector<T> &F, std::vector<T> &dF)
{
  F[0] = (T)0.0;
  F[1] = (T)0.0;
  F[2] = (T)0.0;
  
  auto Ri = particles[ind]->GetPos();
  for (unsigned int j=0; j<N; j++)
    {
      if (j != ind)
        {
          auto Rj = particles[j]->GetPos();
 	  GetForce(Ri,Rj,dF);
	  
          F[0] += dF[0];
	  F[1] += dF[1];
	  F[2] += dF[2];
        }
    }
}

template <typename T>
void ParticleBox<T>::Solve(unsigned int steps)
{
  std::vector<T> computedE (3,0.0);
  std::vector<T> force (3,0.0);
  std::vector<T> nforce (3,0.0);
  
  ComputeEnergy(computedE);
  std::cout << 0 << " " << std::setprecision( 12 )<< computedE << std::endl;
  
  for (unsigned int t=0; t<steps; t++)
    {
      std::vector<std::vector<T> > npos, nvel;

      for (unsigned int n=0; n<N; n++)
        {
	  auto &mass = particles[n]->mass;

	  InternalForce(n,force,nforce);
	  auto acc = (1/mass)*force;
          particles[n]->SetAcc(acc);

          npos.push_back(VerletNextR(n));
        }
      SetPos(npos);
      
      for (unsigned int n=0; n<N; n++)
        {
          auto &mass = particles[n]->mass;
	  InternalForce(n,nforce,force);
	  auto nacc = (1/mass)*nforce;
          
          nvel.push_back(VerletNextV(n,nacc));          
        }
      SetVel(nvel);

      ComputeEnergy(computedE);
      std::cout << t+1 << " " << std::setprecision( 12 )<< computedE << std::endl;
    }
}

template <typename T>
void ParticleBox<T>::WriteData(std::string outputfile)
{
  
  std::ofstream fout;  
  fout.open(outputfile);

  //PUT CHECK TO SEE SOME PARTICLES ARE CREATED
  if (fout.is_open())
    { 
      //double M = this->particles[0]->GetMass();
      double M = this->particles[0]->mass;
      fout << std::setprecision( PREC ) << N << " " << L << " " << T0 << " " 
	   << h << " " << M << "\n";

      for (unsigned int n=0; n < this->N; n++)
        {
	  auto pos = this->particles[n]->pos;
          auto vel = this->particles[n]->vel;
          fout << std::setprecision( PREC ) << pos << " " << vel << "\n";
        }
      fout.close();
      std::cout << "Solution saved to: " << outputfile << std::endl;
    }
  else
    {
      ThrowException("ERROR: Failed to open the file !");
    }
}

template <typename T>
void ParticleBox<T>::GetForce(const std::vector<T> &posi, const std::vector<T> &posj, std::vector<T> &F)
{
  T r = Distance(posi,posj);
  T r2 = r*r;
  T r2i = 1/r2;
  T r6i = (T)std::pow(r2i,3);

  Displacement(posi,posj,F);

  for (unsigned int i=0; i<DIM; i++)
    {
      F[i] = 24*r6i*r2i*(2*r6i-1)*F[i];
    }

  //return F;
}

template <typename T>
void ParticleBox<T>::Displacement(const std::vector<T> &posi, const std::vector<T> &posj, std::vector<T> &d)
{
  //auto d = posi-posj;
  d[0] = posi[0]-posj[0]; d[1] = posi[1]-posj[1]; d[2] = posi[2]-posj[2];
  //d = PutInBox(d);
  PutInBox(d);
  
  //return d;
}

template <typename T>
T ParticleBox<T>::Distance(const std::vector<T> &posi,const std::vector<T> &posj)
{
  //std::vector<T> d (DIM, 0.0);
  //Displacement(posi,posj,d);

  double d1 = ((posi[1]-posj[1]) - std::nearbyint((posi[1]-posj[1])/L)*L);
  double d2 = ((posi[2]-posj[2]) - std::nearbyint((posi[2]-posj[2])/L)*L);
  double d0 = ((posi[0]-posj[0]) - std::nearbyint((posi[0]-posj[0])/L)*L);
  
  //auto d = Displacement(posi,posj);
  //Displacement(posi,posj,d);
  return std::sqrt(d1*d1 + d2*d2 + d0*d0);
  //return L2norm(d);
  /*  return std::sqrt((posi[0]-posj[0])*(posi[0]-posj[0]) +
      (posi[1]-posj[1])*(posi[1]-posj[1]) + (posi[2]-posj[2])*(posi[2]-posj[2]))*/;
}

template <typename T>
T ParticleBox<T>::Potential(T r)
{
  T r6 = (T)std::pow(r,6);
  T r12 = (T)std::pow(r6,2);
  
  return 4*(1/r12 - 1/r6);
}

template <typename T>
void ParticleBox<T>::PutInBox(std::vector<T> &pos)
{
  for (unsigned int i=0; i<DIM; i++)
    {
      pos[i] = (pos[i] - std::nearbyint(pos[i]/L)*L);
    }
}

template <typename T>
std::vector<T> ParticleBox<T>::VerletNextR(unsigned int ind)
{
  std::vector<T> rt_plus_h (DIM, 0.0);
  
  auto &pos = particles[ind]->pos;
  auto &vel = particles[ind]->vel;
  auto &acc = particles[ind]->acc;


  rt_plus_h += pos + h*vel + (T)0.5*h*h*acc;

  return rt_plus_h;
}

template <typename T>
std::vector<T> ParticleBox<T>::VerletNextV(unsigned int ind, 
                                           const std::vector<T> &nacc)
{
  std::vector<T> vt_plus_h (DIM, 0.0);

  auto vel = particles[ind]->vel;
  auto acc = particles[ind]->acc;

  vt_plus_h += vel + (T)0.5*h*(acc + nacc);

  return vt_plus_h;
}

template <typename T>
void ParticleBox<T>::SetPos(const std::vector<std::vector<T> > &pos)
{
  for (unsigned int n=0; n<N; n++)
    particles[n]->SetPos(pos[n]);
}

template <typename T>
void ParticleBox<T>::SetVel(const std::vector<std::vector<T> > &vel)
{
  for (unsigned int n=0; n<N; n++)
    particles[n]->SetVel(vel[n]);
}

#endif /* PARTICLEBOX_HPP */
