#include <array>
#include <cmath>
#include <fstream>
#include <iostream>
#include <map>
#include <memory>
#include <unordered_set>

#include "part.hpp"

Part::Part(void)
{

}

void Part::ReadPartFile(std::string partfile)
{
  std::ifstream f;
  f.open(partfile);
  
  if (f.is_open())
    {
      std::string shape;
      unsigned int color;
      std::unordered_set<unsigned int> colors;

      while (f >> shape >> color)
	{
	  std::cout << shape << " " << color << std::endl;
	  colors.insert(color);

	  // Determine the shape and how many values need to be read
	  if (shape == "sphere")
	    {
	      double x, y, z, r;
	      f >> x >> y >> z >> r;
	      this->shapes[nshapes] = std::make_shared<Sphere>(x,y,z,r);	      
	      nshapes++;
	    }
	  else if (shape == "rccone")
	    {
	      double r, xb, yb, zb, xa, ya, za;
	      f >> r >> xb >> yb >> zb >> xa >> ya >> za;
	      this->shapes[nshapes] = std::make_shared<RightCircularCone>(r,xb,yb,zb,xa,ya,za);
	      nshapes++;
	    }
	  else 
	    {
	      std::cerr << "ERROR: Unknown shape '" << shape;
	      std::cerr << "'!" << std::endl;
	      exit(1);
	    }

	  this->shapes[nshapes-1]->SetColor(color);
	}
      ncolor = colors.bucket_count();
    }
  f.close();

}

std::map<unsigned int,double> Part::SliceVolume(const std::array<double,3> &unitnormal,
						const std::array<double,3> &point,
						const std::array<double,3> &discretization)
{
  std::map<unsigned int,double> vol;
  bool normalx = fabs(unitnormal[0]) > 0.0;
  bool normaly = fabs(unitnormal[1]) > 0.0;
  bool normalz = fabs(unitnormal[2]) > 0.0;
    
  double dx, dy, dz;
  dx = discretization[0]; dy = discretization[1]; dz = discretization[2];

  double x, y, z; 
  x = point[0]; y = point[1]; z = point[2];

  double xmax = std::numeric_limits<double>::min();
  double xmin = std::numeric_limits<double>::max();

  double ymin = xmin;
  double zmin = xmin;

  double ymax = xmax;
  double zmax = xmax;

  for (auto &o : this->shapes)
    {
      auto box = o.second->BoundingBox();
      xmax = fmax(xmax, box[0] + box[3]/2);
      ymax = fmax(ymax, box[1] + box[3]/2);
      zmax = fmax(zmax, box[2] + box[3]/2);

      xmin = fmin(xmin, box[0] - box[3]/2);
      ymin = fmin(ymin, box[1] - box[3]/2);
      zmin = fmin(zmin, box[2] - box[3]/2);
    }
  std::cout << "max: " << xmax << "," << ymax <<  "," << zmax << std::endl;
  std::cout << "min: " << xmin << "," << ymin <<  "," << zmin << std::endl;

  std::array<unsigned long,2> i;
  std::array<double,3> X;

  if ((int)(normalx + normaly + normalz) != 1)
    {
      std::cerr << "Normal not in x, y or z direction" << std::endl;
      exit(1);
    }
  else if (normalx)
    {
      if (x > xmax || x < xmin)
	{
	  std::cerr << "ERROR: slice doesn't intersect any shape " << std::endl;
	  exit(1);
	}
      else
	{
	  i[0] = 1; i[1] = 2; i[2] = 0;
	  X[0] = x; X[1] = ymin; X[2] = zmin;
	  Part::GridIterator(vol,X,ymax,zmax,dy,dz,i);
	}      
    }
  else if (normaly)
    {
      if (y > ymax || y < ymin)
	{
	  std::cerr << "ERROR: slice doesn't intersect any shape " << std::endl;
	  exit(1);
	}
      else
	{
	  i[0] = 0; i[1] = 2; i[2] = 1;
	  X[0] = xmin; X[1] = y; X[2] = zmin;
	  Part::GridIterator(vol,X,xmax,zmax,dx,dz,i);
	}
    }
  else
    {
      if (z > zmax || z < zmin)
	{
	  std::cerr << "ERROR: slice doesn't intersect any shape " << std::endl;
	  exit(1);
	}
      else
	{
	  i[0] = 0; i[1] = 1; i[2] = 2;
	  X[0] = xmin; X[1] = ymin; X[2] = z;
	  Part::GridIterator(vol,X,xmax,ymax,dx,dy,i);
	}
    }

  for(auto &data : vol) 
   data.second = data.second*(dx*dy*dz);

  return vol;
}

void Part::GridIterator(std::map<unsigned int,double> &vol,
			std::array<double,3> &X,
			double x0max, double x1max,
			double dx0, double dx1,
			const std::array<unsigned long,2> &i)
{
  unsigned int color;

  double x1min = X[i[1]];
  
  while (X[i[0]]<x0max+dx0/2)
    {
      while (X[i[1]]<x1max+dx1/2)
	{
	  bool inside = false;
	  for (auto &o : this->shapes)
	    {
	      if (!inside)
		{
		  if (o.second->PointInside(X))
		    {
		      color = o.second->GetColor();
		      vol[color]++; 
		      inside = true;
		    }
		}
	      else
		{
		  if (o.second->PointInside(X))
		    {
		      if (o.second->GetColor()<color)
			{
			  vol[color]--;
			  vol[o.second->GetColor()]++;
			}
		    }
		}
	    }
	  X[i[1]] = X[i[1]] + dx1;
	}
      X[i[0]] = X[i[0]] + dx0;
      X[i[1]] = x1min;
    }	     
}
