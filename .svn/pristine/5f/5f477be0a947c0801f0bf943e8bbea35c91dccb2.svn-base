#ifndef IMAGE_HPP
#define IMAGE_HPP

#include <algorithm>
#include <limits>
#include <string>

#include "imageio.hpp"
#include "tiffio.h"

class IsGreaterThan
{
  float value;
  public:
  IsGreaterThan(float valuein) 
  { 
    value = valuein; 
  }
  // Special method so object can be called as a function
  bool operator()(int dividend) 
  { 
    return (dividend>=value); 
  }
};

namespace ImageAnalysis
{
  template <typename T>
  class Image
  {
  private:
      unsigned int width, height;
      T *rgba;

  public:
    Image(std::string filename)
    {
      std::cout << "Image <unsigned char>" << std::endl;
      ImageIO::Read8bitGrayscaleTIFF(filename,this->rgba,width,height);
    }
    
    Image(T *data, unsigned int width, unsigned int height)
    {
      this->width = width;
      this->height = height;

      this->rgba = new T[width*height];
      for(unsigned int n = 0; n < width*height; n++)
	  this->rgba[n] = data[n];
    }

    void Save(std::string filename)
    {
      ImageIO::Write8bitGrayscaleTIFF(filename,this->rgba,this->width,this->height);
    }

    void Threshold(T threshold)
    {
      for(unsigned int n = 0; n < this->width*this->height; n++)
	{
	  T pix = this->rgba[n];
	  if (pix < threshold)
	    this->rgba[n] = 0;
	  else
	    this->rgba[n] = 255;
	}
    }

    unsigned long int CountPixelsGreaterThanOrEqual(T value = (T)0)
    {
      unsigned int n = this->width*this->height;
      unsigned long int count = std::count_if(this->rgba,this->rgba + n,IsGreaterThan((float)value));
      
      return count;
    }

    ~Image()
    {
      delete[] rgba;
      rgba = NULL;
    }
  };
  
  template <>
  Image<float>::Image(std::string filename)
    {
      unsigned char *rgbachar = NULL;
      ImageIO::Read8bitGrayscaleTIFF(filename,rgbachar,this->width,this->height);

      this->rgba = new float[this->width*this->height];
      for(unsigned int n = 0; n < width*height; n++)
	{
	  this->rgba[n] = (float)((float)rgbachar[n]/255.0f);
	}
      
      delete[] rgbachar;
      rgbachar = NULL;
    }

  template <>
  void Image<float>::Save(std::string filename)
  {
    unsigned char *rgbachar = NULL;
    unsigned char lim_min = std::numeric_limits<unsigned char>::min();
    unsigned char lim_max = std::numeric_limits<unsigned char>::max();
    
    rgbachar = new unsigned char[this->width*this->height];
    for(unsigned int n = 0; n < width*height; n++)
      {
	float pix = this->rgba[n]*255.0f;
	if (pix < lim_min)
	  pix = lim_min;
	else if (pix > lim_max)
	  pix = lim_max;
	rgbachar[n] = (unsigned char)(pix);
      }
    
    ImageIO::Write8bitGrayscaleTIFF(filename,rgbachar,this->width,this->height);

    delete[] rgbachar;
    rgbachar = NULL;
  }

  template<>
  void Image<float>::Threshold(float threshold)
  {
    for(unsigned int n = 0; n < this->width*this->height; n++)
      {
    	float pix = this->rgba[n];
	if (pix < threshold)
	  this->rgba[n] = 0;
	else
	  this->rgba[n] = 1;
      }
  }
  
}

#endif /* IMAGE_HPP */
